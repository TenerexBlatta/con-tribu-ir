# Arquitectura Completa - Plataforma de Cursos "Tribu"

## 1. Stack Tecnológico Recomendado

```
Frontend: Next.js 14 + React + TypeScript + Tailwind CSS
Backend: Next.js API Routes + Prisma ORM
Base de Datos: PostgreSQL (Supabase/Neon)
Autenticación: NextAuth.js
Pagos: Flow (Chile)
Storage: Cloudinary/AWS S3 (videos/imágenes)
Deploy: Vercel
```

## 2. Estructura del Proyecto

```
tribu-platform/
├── prisma/
│   ├── schema.prisma
│   └── migrations/
├── public/
├── src/
│   ├── app/
│   │   ├── (auth)/
│   │   │   ├── login/
│   │   │   └── register/
│   │   ├── dashboard/
│   │   │   ├── mentor/
│   │   │   └── student/
│   │   ├── courses/
│   │   ├── api/
│   │   │   ├── auth/
│   │   │   ├── courses/
│   │   │   ├── payments/
│   │   │   └── users/
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── components/
│   │   ├── ui/
│   │   ├── landing/
│   │   ├── courses/
│   │   ├── dashboard/
│   │   └── payment/
│   ├── lib/
│   │   ├── auth.ts
│   │   ├── prisma.ts
│   │   ├── flow.ts
│   │   └── utils.ts
│   └── types/
└── package.json
```

## 3. Modelo de Base de Datos (Prisma Schema)

```prisma
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  mentorProfile  MentorProfile?
  studentProfile StudentProfile?
  courses        Course[]       @relation("CourseCreator")
  enrollments    Enrollment[]
  payments       Payment[]
  
  @@map("users")
}

model MentorProfile {
  id          String @id @default(cuid())
  userId      String @unique
  bio         String?
  expertise   String[]
  commission  Float  @default(0.7) // 70% para el mentor
  totalEarnings Float @default(0)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mentor_profiles")
}

model StudentProfile {
  id     String @id @default(cuid())
  userId String @unique
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("student_profiles")
}

model Course {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Float
  thumbnail   String?
  status      CourseStatus @default(DRAFT)
  creatorId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relaciones
  creator     User         @relation("CourseCreator", fields: [creatorId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
  payments    Payment[]
  
  @@map("courses")
}

model Lesson {
  id          String  @id @default(cuid())
  courseId    String
  title       String
  description String?
  videoUrl    String?
  duration    Int?    // en segundos
  order       Int
  
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@map("lessons")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Float    @default(0) // 0-100
  createdAt DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model Payment {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  amount        Float
  mentorAmount  Float        // Comisión del mentor
  platformAmount Float       // Comisión de la plataforma
  flowToken     String       @unique
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  
  @@map("payments")
}

enum UserRole {
  STUDENT
  MENTOR
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
```

## 4. Componentes Principales

### Landing Page
- Hero Section con CTA
- Sección "¿Cómo funciona?"
- Grid de cursos destacados
- Testimonios
- Footer con enlaces importantes

### Dashboard Mentor
- Resumen de ganancias
- Lista de cursos creados
- Estadísticas de estudiantes
- Herramientas de creación de cursos

### Dashboard Student
- Cursos inscritos
- Progreso de aprendizaje
- Certificados obtenidos
- Recomendaciones

### Sistema de Pagos
- Integración con Flow
- Cálculo automático de comisiones
- Historial de transacciones
- Reportes financieros

## 5. Funcionalidades Clave

### Autenticación
- Login/Register con NextAuth.js
- Roles de usuario (Student/Mentor/Admin)
- Protección de rutas

### Gestión de Cursos
- CRUD completo para mentores
- Upload de videos e imágenes
- Editor de contenido rico
- Sistema de preview

### Sistema de Pagos
- Integración con Flow API
- Split payments automático
- Webhooks para confirmación
- Dashboard financiero

### Panel de Administración
- Gestión de usuarios
- Moderación de contenido
- Reportes y analytics
- Configuración de comisiones

## 6. APIs Necesarias

```typescript
// API Routes structure
/api/
├── auth/
│   ├── [...nextauth].ts
│   └── register.ts
├── courses/
│   ├── index.ts          // GET, POST
│   ├── [id].ts           // GET, PUT, DELETE
│   └── [id]/enroll.ts    // POST
├── payments/
│   ├── create.ts         // POST - crear pago Flow
│   ├── confirm.ts        // POST - webhook Flow
│   └── history.ts        // GET - historial
├── users/
│   ├── profile.ts        // GET, PUT
│   └── earnings.ts       // GET - ganancias mentor
└── upload/
    └── video.ts          // POST - upload videos
```

## 7. Integración con Flow

```typescript
// lib/flow.ts
export class FlowPayment {
  static async createPayment(courseId: string, amount: number, mentorId: string) {
    const mentorCommission = amount * 0.7;
    const platformCommission = amount * 0.3;
    
    return await flow.payment.create({
      amount: amount,
      currency: 'CLP',
      subject: `Curso ID: ${courseId}`,
      urlReturn: `${process.env.NEXT_PUBLIC_URL}/payment/success`,
      urlConfirmation: `${process.env.NEXT_PUBLIC_URL}/api/payments/confirm`,
      optional: JSON.stringify({
        courseId,
        mentorId,
        mentorCommission,
        platformCommission
      })
    });
  }
}
```

## 8. Plan de Implementación

### Fase 1: Setup y Auth (Semana 1)
- [x] Configurar Next.js + Prisma
- [x] Implementar autenticación
- [x] Crear modelos de base de datos
- [x] Landing page básica

### Fase 2: Cursos y Contenido (Semana 2)
- [x] CRUD de cursos
- [x] Sistema de upload
- [x] Dashboard mentor
- [x] Visualización de cursos

### Fase 3: Pagos y Comisiones (Semana 3)
- [x] Integración Flow
- [x] Sistema de enrollments
- [x] Cálculo de comisiones
- [x] Dashboard financiero

### Fase 4: Funcionalidades Avanzadas (Semana 4)
- [x] Progreso de cursos
- [x] Certificados
- [x] Sistema de reviews
- [x] Analytics y reportes

## 9. Variables de Entorno Necesarias

```env
# Database
DATABASE_URL="postgresql://..."

# NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="your-secret"

# Flow
FLOW_API_KEY="your-flow-api-key"
FLOW_SECRET_KEY="your-flow-secret-key"
FLOW_SANDBOX="true" # false en producción

# Storage
CLOUDINARY_URL="cloudinary://..."
```
